use('restDB');


db.restaurants.find(
    {
        "cuisine" : { $ne: "American "}, /*American té un putu espai al final */
         "grades.score" : {$gt:70}, 
         "address.coord":{$lt:-65.754168, } 
    } );

db.restaurants.find(
{
    "cuisine": {$ne: 'American '}, 
    "grades.grade" : "A", 
    "borough": {$ne: "Brooklyn"}
},
{
    "cuisine":1, 
    "grades.grade":1, 
    "borough": 1, 
    "_id": 0,
    "name":1
} ).sort({cuisine:-1});

db.restaurants.find(
    {name: /^Wil/}, /* En regex, ^significa start of input. Menys entre [], llavors es com un "not" [aeiou] fa match amb aeio, [^aeiou] fa match amb tot lo que no es aeiou*/
    {restaurant_id:1,
    name:1,
    borough:1,
    cuisine:1,
    _id:0});
db.restaurants.find(
    {name: /ces$/}, /* En regex, $ vol dir end of input*/
    {restaurant_id:1,
    name:1,
    borough:1,
    cuisine:1,
    _id:0} )
db.restaurants.find(
    {name: /Reg/i},  /*per defecte la regular expression es un "contains", fara match si apareig "Reg" en qualsevol lloc amb la i del darrere es case insensitive*/
    {restaurant_id:1,
    name:1,
    borough:1,
    cuisine:1,
    _id:0 } );

db.restaurants.find(
    {
        borough:"Bronx",
         cuisine: /American |Chinese/ /*les regex et salven d'utilitzar el $or. /coses|altrescoses/ torna el que fa match amb una O altra expressio literal */
    },
    {
        cuisine:1,
        _id:0
    } );

db.restaurants.find(
    { 
        $and: [ 
            {borough: {$ne:"Staten Island"} }, /* amb ands i nots les regex semblen un malson, potser es que no les ser utilitzar*/
            {borough: {$ne:"Bronx"} },
            {borough:{$ne:"Queens"}}, 
            {borough:{$ne:"Brooklyn"} } 
        ] }, 
    {
        restaurant_id:1,
        name:1,
         borough:1, cuisine:1, _id:0});

db.restaurants.find(
    {
        borough:"Bronx", 
        cuisine: /American |Chinese/ 
    },
    {
        cuisine:1,
        borough:1,
        _id:0
    } );

db.restaurants.find(
    {
        $and: [  /*Cal utilitzar el and si volem imposar més d'una regla al mateix field*/
            {cuisine: /Seafood/},
            {cuisine: {$not: /American/}}, 
            {cuisine: {$not: /Chinese/}}
        ] 
    }, 
    {restaurant_id:1,name:1, borough:1,cuisine:1, _id:0});


db.restaurants.find(
    {
         /*Sense el $and mostra les cuisines que li don la gana*/
        cuisine: /Seafood/,
        cuisine: {$not: /American/}, 
        cuisine: {$not: /Chinese/} 
    }, 
    {restaurant_id:1,name:1, borough:1,cuisine:1, _id:0});


/*El operador (and/or??) esta implicit entre camps diferents en una query: */

 db.runCommand(
    {
        count:"restaurants",
        query: {
            $and: [
                {borough:/Manhattan|Queens/},
                {cuisine: /Seafood/}
            ]
        }
    }
);
/*Es exactament el mateix que: */ 

db.runCommand(
    {
        count:"restaurants",
        query: {
            borough:/Queens|Manhattan/,
            cuisine: /Seafood/
        }
    }
);

/*CONSULTA 21: */
db.restaurants.find(
    {
        $or: [
            {$and: [
                {cuisine: /Seafood/}, 
                {cuisine: {$not: /American/}}, 
                {cuisine: {$not: /Chinese/}}
            ] },
            {name: /^Wil/}
        ]
    },
    {restaurant_id:1,name:1, borough:1,cuisine:1, _id:0}).sort({name:-1});

db.restaurants.find({"grades.date": ISODate("2014-08-11T00:00:00Z") }, 
{name:1,"grades.date":1,_id:0});

/*Consulta 22 
demana un document "grades" en concret amb
grade A, score 11 i data TAL
com que grades es una array de documents si busquem "normal"
et mostra tots els documents de restaurants que tenen algun document dins de grades
que compleix algun dels criteris
Per buscar un document que compleixi els tres dins de l'array hem d'usar $elemMatch: 
*/
db.restaurants.find(
    {
        "grades": {$elemMatch: {grade:'A', score:11, date: ISODate("2014-08-11T00:00:00Z")} }
    },
    {restaurant_id:1, name:1, grades:1, _id:0} );

/*
CONSULTA 23
Quan utilitzes dot notation per fer queries d'una Array importa l'ordre en
el que escrius els camps del document (vaia pal)
*/

db.restaurants.find(
    {
        "grades.1": { date: ISODate("2014-08-11T00:00:00Z"),grade:'A', score: 9  } //Escrits en ordre diferent no torna res
    },
    {restaurant_id:1,name:1,grades:1,_id:0});

/*CONSULTA 24*/
db.restaurants.find(
    {
            "address.coord.1": {$lt:52, $gt:42}
    }, 
    {restaurant_id:1,name:1,address:1,_id:0});

/*CONSULTA 28 
dos maneres de checkejar si un field existeix o no:
*/
db.restaurants.find(
    {
        "address.street" : {$exists: true}
    }, 
    {name:1, "address.street":1}).skip(3770); //el skip es per comprovar que hi ha 3772 documents

db.restaurants.find(
    {
        "address.street" : {$type: "null"} //no torna cap document
    }, 
    {name:1, "address.street":1});

/*CONSULTA 29*/
db.restaurants.find(
    {
        "address.coord" : {$type: "double"} //address.coord es array, pero conte doubles llavors aixi funciona
    }, //passaria el mateix si la array contingues doubles i altres coses??
    {name:1, _id:0, "address.coord":1} );

db.restaurants.find(
    {
        "address.coord" : {$type: "array"} 
    }, 
    {name:1, _id:0, "address":1} );

db.restaurants.find(
    {
        address: {$type: "string"} //tot i que address conte strings, aquesta query no torna res
    },//nomes torna coses si poses $type: "object"
    {name:1, address:1,_id:0} );

/*CONSULTA 30 */

db.runCommand(
    {
        count:"restaurants",
        query: {"grades.score": {$mod: [7, 0]}}
    }
);

/*CONSULTA 31*/

db.runCommand(
    {
        count:"restaurants",
        query: {name:/mon/}
    }
)
/*CONSULTA 32*/

db.runCommand(
    {
        count:"restaurants",
        query: {name: /^Mad/}
    }
)










